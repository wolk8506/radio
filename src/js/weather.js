// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

// *  b8b2f3c187f97d30e013b6b54969cb8c

//*   https://api.openweathermap.org/data/2.5/forecast?lat=49.982&lon=36.2566&appid=b8b2f3c187f97d30e013b6b54969cb8c&lang=ru

//*   https://api.openweathermap.org/data/2.5/forecast?q=%D0%9A%D0%B8%D0%B5%D0%B2&appid=b8b2f3c187f97d30e013b6b54969cb8c&lang=ru

//*   https://openweathermap.org/img/wn/10d@4x.png

//*   https://ipapi.co/json/

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

import sprite from '../images/sprite.svg';
import { Notify } from 'notiflix/build/notiflix-notify-aio';
import { Report } from 'notiflix/build/notiflix-report-aio';
import axios from 'axios';

const weatherDay = document.querySelector('#weather-day');
const weather = document.querySelector('#weather-hour');
const btnWeatherHour = document.querySelector('#radio-1-weather');
const btnWeatherWeek = document.querySelector('#radio-2-weather');
let weatherHourTest = '';
let weatherDayTest = '';
let city = '';
let oNwriteCity = false;
let onRender = true;
const initialStateWeather = JSON.parse(
  localStorage.getItem('initialStateWeather')
);

setInterval(() => {
  startSearch();
}, 600000);

startSearch();
function startSearch() {
  const latitude = JSON.parse(localStorage.getItem('latitude'));
  const longitude = JSON.parse(localStorage.getItem('longitude'));
  const search_city = localStorage.getItem('search_city');
  if (
    initialStateWeather === null ||
    (latitude === null && search_city === 'null')
  ) {
    console.log('gthdfz bybwbfkbpfwbz');
    axios
      .request(`https://ipapi.co/json/`)
      .then(function (response) {
        localStorage.setItem('latitude', response.data.latitude);
        localStorage.setItem('longitude', response.data.longitude);
        weatherFourDay(
          `lat=${response.data.latitude}&lon=${response.data.longitude}`
        );
        weatherOneDay(`${response.data.latitude},${response.data.longitude}`);
      })
      .catch(function (error) {
        console.log('‚ùå Error: ', error.message);
      })
      .finally(function () {});
    localStorage.setItem('initialStateWeather', true);
  } else {
    if (search_city && search_city !== 'null') {
      weatherFourDay(`q=${search_city}`);
      weatherOneDay(search_city);
    } else if (latitude) {
      weatherFourDay(`lat=${latitude}&lon=${longitude}`);
      weatherOneDay(`${latitude},${longitude}`);
    } else {
      weatherFourDay(`q=–•–∞—Ä—å–∫–æ–≤`);
      weatherOneDay(`–•–∞—Ä—å–∫–æ–≤`);
    }
  }
}

function weatherOneDay(q) {
  weather.innerHTML = `<div class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>`;

  axios
    .request(
      `https://api.weatherapi.com/v1/forecast.json?key=02f4d3b9a4c141c6b73150514232405&q=${q}&days=14&lang=ru`
    )
    .then(function (response) {
      weatherD(response.data);
      weatherH(response.data);
      renderHourDay();
      if (oNwriteCity) {
        localStorage.setItem('search_city', city);
        oNwriteCity = false;
      }
    })
    .catch(function (error) {
      console.log('‚ùå Error: ', error.message);
      if (oNwriteCity) {
        Notify.failure('–¢–∞–∫–æ–π –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        oNwriteCity = false;
      }
      startSearch();
    })
    .finally(function () {});
}

function weatherFourDay(q) {
  axios
    .request(
      `https://api.openweathermap.org/data/2.5/forecast?${q}&appid=b8b2f3c187f97d30e013b6b54969cb8c&lang=ru`
    )
    .then(function (response) {
      // console.log(response.data);
      fourDayWeather(response.data);
    })
    .catch(function (error) {
      console.log('Error: ', error.message);
    })
    .finally(function () {});
}

function locationWeather() {
  function success(position) {
    const latitude = position.coords.latitude;
    const longitude = position.coords.longitude;
    localStorage.setItem('latitude', latitude);
    localStorage.setItem('longitude', longitude);
    weatherFourDay(`lat=${latitude}&lon=${longitude}`);
    weatherOneDay(`${latitude},${longitude}`);
    localStorage.setItem('search_city', null);
  }

  function error() {
    Notify.warning('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ');
  }

  if (!navigator.geolocation) {
    alert('Geolocation –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º');
  } else {
    weatherDay.innerHTML = '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è‚Ä¶';
    navigator.geolocation.getCurrentPosition(success, error);
  }
}

renderHourDay();

function renderHourDay() {
  if (onRender) {
    weather.innerHTML = weatherHourTest;
  } else {
    weather.innerHTML = weatherDayTest;
  }
}

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

btnWeatherHour.oninput = function () {
  onRender = true;
  renderHourDay();
};

btnWeatherWeek.oninput = function () {
  onRender = false;
  renderHourDay();
};

weatherDay.addEventListener('keyup', e => {
  if (e.target.id === 'city') {
    city = e.target.value;
    if (e.target.value.length > 2 && e.key == 'Enter') {
      oNwriteCity = true;
      weatherFourDay(`q=${city}`);
      weatherOneDay(city);
    }
  }
});

weatherDay.addEventListener('click', event => {
  if (event.target.value === 'search') {
    oNwriteCity = true;
    weatherFourDay(`q=${city}`);
    weatherOneDay(city);
  }
  if (event.target.value === 'location') {
    locationWeather();
  }
});

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// !!!!!          –† –ï –ù –î –ï –†         H T M L
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

// ?????????????????????????????????????????????????          –ü–æ–≥–æ–¥–∞ –Ω–∞ 24 —á–∞—Å–∞       ??????????????????????????????

function weatherH(data) {
  const hourTwoDays = [];
  data.forecast.forecastday[0].hour.map(i => {
    let arr = i;
    arr.style = 'first-day';
    hourTwoDays.push(arr);
  });
  data.forecast.forecastday[1].hour.map(i => hourTwoDays.push(i));
  const date = new Date();
  const hourOneDay = hourTwoDays.splice(date.getHours(), 24);

  const hour = hourOneDay
    .map(
      i => `
<div title="${i.condition.text}. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è ${
        i.chance_of_rain
      } %" class="hour-item">
<p class="${i.style}"><svg class="icon-time" width="24" height="24">
          <use href="${sprite}#icon-time"></use>
        </svg>${i.time.slice(11)}</p> 
        <p class="hour-item-temp">${i.feelslike_c}¬∞C </p>
      <img src="${i.condition.icon}"></div>
      `
    )
    .join('');
  weatherHourTest = hour;
}

// ?????????????????????????????????????????????????          –ü–æ–≥–æ–¥–∞ –Ω–∞ 1 –¥–µ–Ω—å        ??????????????????????????????

function weatherD(data) {
  const date = new Date();
  const options2 = {
    month: 'long',
    day: 'numeric',
    weekday: 'long',
  };
  const dayAndMonth = date.toLocaleDateString('ru-RU', options2);

  const {
    country = data.location.country, //–°—Ç—Ä–∞–Ω–∞
    city = data.location.name, //–ì–æ—Ä–æ–¥
    timeZone = data.location.tz_id, //–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞
    temperature = data.current.feelslike_c, //–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö —Ü–µ–ª—å—Å–∏—è
    conditionText = data.current.condition.text, //–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è, –æ–ø–∏—Å–∞–Ω–∏–µ
    wind_ms = (data.current.wind_kph / 3.6).toFixed(2), //–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ –≤ –º/—Å
    wind_degree = data.current.wind_degree, //–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö   data.current.wind_degree + 136,
    sunrise = data.forecast.forecastday[0].astro.sunrise.slice(0, -3), //–í—Ä–µ–º—è —Ä–∞—Å—Å–≤–µ—Ç–∞
    sunsetH = Number(data.forecast.forecastday[0].astro.sunset.slice(0, 2)) +
      12, //–í—Ä–µ–º—è –∑–∞–∫–∞—Ç–∞ - —á–∞—Å—ã
    sunsetM = data.forecast.forecastday[0].astro.sunset.slice(3, -3), //–í—Ä–µ–º—è –∑–∞–∫–∞—Ç–∞ - –º–∏–Ω—É—Ç—ã
    icon = data.current.condition.icon.slice(34), //–ò–∫–æ–Ω–∫–∞ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
    pressure_mb = data.current.pressure_mb, //–î–∞–≤–ª–µ–Ω–∏–µ –º–º —Ä—Ç —Å–±
    cloud = data.current.cloud, // –û–±–ª–∞—á–Ω–æ—Å—Ç—å
    vis_km = data.current.vis_km, // –í–∏–¥–∏–º–æ—Å—Ç—å –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤
    humidity = data.current.humidity, // –í–ª–∞–∂–Ω–æ—Å—Ç—å
    maxwind_ms = (data.forecast.forecastday[0].day.maxwind_kph / 3.6).toFixed(
      2
    ), // –ü–æ—Ä—ã–≤—ã –≤–µ—Ç—Ä–∞ –º/—Å
    uv = data.current.uv, // –£–ª—å—Ç—Ä–æ—Ñ–∏–æ–ª–µ—Ç
    precip_mm = data.current.precip_mm, // –û—Å–∞–¥–∫–∏ –º–º
    moonrise = data.forecast.forecastday[0].astro.moonrise,
    moonset = data.forecast.forecastday[0].astro.moonset,
    last_updated = data.current.last_updated,
  } = data;

  let moonrise24 = '--:--';
  let moonset24 = '--:--';

  if (moonrise.slice(6) == 'PM') {
    moonrise24 = `${Number(moonrise.slice(0, 2)) + 12}:${moonrise.slice(3, 5)}`;
  } else moonrise24 = moonrise.slice(0, 5);

  if (moonset.slice(6) == 'PM') {
    moonset24 = `${Number(moonset.slice(0, 2)) + 12}:${moonset.slice(3, 5)}`;
  } else moonset24 = moonset.slice(0, 5);

  weatherDay.innerHTML = `
  <style scoped>.progress::after {width: ${humidity}%;}</style>
  <div class="day-list">
    <div class="location">
      <button class="button-location" value="location" type="button">&#128204;</button>
      <div class="inputbox">
        <input required="required" id="city" /><span>${country}, ${city} </span><i></i>
      </div>
      <button class="button-search" type="button" value="search">üîçÔ∏é</button>
    </div>
    <div class="location-line"></div>
    <div>${timeZone}, ${dayAndMonth}</div>
    <p class="condition-text">${conditionText}</p>
    <div class="condition">
      <div class="condition-block-left">
        <span>${temperature}¬∞</span>
        <div class="condition-block-small">
          <p title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å–∞–¥–∫–æ–≤" class="condition-block-item"><svg width="32" height="32"><use href="${sprite}#icon-umbrella"></use></svg>${precip_mm} –º–º</p>
          <p  title="–û–±–ª–∞—á–Ω–æ—Å—Ç—å" class="condition-block-item"><svg width="32" height="32"><use href="${sprite}#icon-clouds"></use></svg>${cloud} %</p>
          <p title="–í–∏–¥–∏–º–æ—Å—Ç—å" class="condition-block-item"><svg width="32" height="32"><use href="${sprite}#icon-eye3"></use></svg>${vis_km} –∫–º</p>
          <p title="–í–ª–∞–∂–Ω–æ—Å—Ç—å" class="condition-block-item"><svg width="32" height="32"><use href="${sprite}#icon-raindrop1"></use></svg>${humidity} %</p>
        </div>
      </div>

      <div class="condition-block">
        <img src="//cdn.weatherapi.com/weather/128x128${icon}" widh="128" />
      </div>
    </div>
    <div class="condition-block-bottom">
      <div>
        <p title="–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞" class="condition-block-item"><svg width="32" height="32"><use href="${sprite}#icon-sunrise"></use></svg>${sunrise}</p>
        <p title="–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞" class="condition-block-item"><svg width="32" height="32"><use href="${sprite}#icon-sunset"></use></svg>${sunsetH}:${sunsetM}</p>
         <p title="–í–æ—Å—Ö–æ–¥ –ª—É–Ω—ã" class="condition-block-item"><svg width="32" height="32"><use href="${sprite}#icon-moonrise"></use></svg>${moonrise24}</p>
        <p title="–ó–∞–∫–∞—Ç –ª—É–Ω—ã" class="condition-block-item"><svg width="32" height="32"><use href="${sprite}#icon-moonset"></use></svg>${moonset24}</p>
      </div>
      <div>
        <p title="–°–∫–æ—Ä–æ—Å—Ç—å –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞" class="condition-block-item"><svg width="32" height="32"><use href="${sprite}#icon-air-sock"></use></svg
          >${wind_ms} –º/—Å &#160;<svg width="32" height="32"style="transform: rotate(${wind_degree}deg)"><use href="${sprite}#icon-wind-w"></use></svg></p>
        <p title="–£–ª—å—Ç—Ä–æ—Ñ–∏–æ–ª–µ—Ç" class="condition-block-item"><svg width="32" height="32"><use href="${sprite}#icon-sun"></use></svg>${uv}/10 UV</p>
        <p title="–ü–æ—Ä—ã–≤—ã –≤–µ—Ç—Ä–∞" class="condition-block-item"><svg width="32" height="32"><use href="${sprite}#icon-wind"></use></svg>${maxwind_ms} –º/—Å</p>
        <p title="–î–∞–≤–ª–µ–Ω–∏–µ" class="condition-block-item"><svg width="32" height="32"><use href="${sprite}#icon-barometer"></use></svg>${pressure_mb}–º–º</p>
      </div>
    </div>
    <p class="update-time">–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${last_updated}</p>
  </div>`;
}

// ?????????????????????????????????????????????????          –ü–æ–≥–æ–¥–∞ –Ω–∞ 4 –¥–Ω—è         ??????????????????????????????

function fourDayWeather(data) {
  const arr = [[], [], [], []];
  for (let n = 0; n < 4; n++) {
    const date = new Date();
    date.setDate(date.getDate() + 1 + n);
    const day = date.getDate();
    const dayWeekday = date.toLocaleDateString('ru-RU', { weekday: 'long' });
    const dayMonthDay = date.toLocaleDateString('ru-RU', {
      month: 'long',
      day: 'numeric',
    });
    data.list.map(i => {
      if (Number(i.dt_txt.slice(8, 10)) === day) {
        arr[n].push({
          hour: i,
          day: { dayWeekday, dayMonthDay },
        });
      }
    });
  }
  console.log(arr);
  weatherFourDayRender(arr);
}

function weatherFourDayRender(data) {
  const weekOne = data
    .map(i => {
      const dayWeekday = i[0].day.dayWeekday;
      const dayMonthDay = i[0].day.dayMonthDay;
      const dayOne = i
        .map(ii => {
          let k = ii.hour;
          const {
            time = k.dt_txt.slice(11, 16), //* –í—Ä–µ–º—è
            cloud = k.clouds.all, //* –û–±–ª–∞—á–Ω–æ—Å—Ç—å
            feels_like = (k.main.feels_like - 273.15).toFixed(1), //* –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞. –≠—Ç–æ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ –ø–æ–≥–æ–¥—ã. –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ö–µ–ª—å–≤–∏–Ω
            grnd_level = k.main.grnd_level, //* –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ –∑–µ–º–ª–∏, –≥–ü–∞
            humidity = k.main.humidity, //* –í–ª–∞–∂–Ω–æ—Å—Ç—å, %
            pressure = k.main.pressure, //* –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ (–Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ—Ä—è, –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö sea_level –∏–ª–∏ grnd_level), –≥–ü–∞
            sea_level = k.main.sea_level, //* –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ—Ä—è, –≥–ü–∞
            temp = (k.main.temp - 273.15).toFixed(1), //* –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞. –ï–¥–∏–Ω–∏—Ü–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ö–µ–ª—å–≤–∏–Ω, –ú–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞: –¶–µ–ª—å—Å–∏–π, –ò–º–ø–µ—Ä—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞: –§–∞—Ä–µ–Ω–≥–µ–π—Ç.
            visibility_km = k.visibility / 1000, //* –í–∏–¥–∏–º–æ—Å—Ç—å, –º–µ—Ç—Ä. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ 10–∫–º
            description = k.weather[0].description, //* –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –≤ –≥—Ä—É–ø–ø–µ. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≤—ã–≤–æ–¥ –Ω–∞ —Å–≤–æ–µ–º —è–∑—ã–∫–µ
            icon = k.weather[0].icon, //* –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–Ω–∞—á–∫–∞ –ø–æ–≥–æ–¥—ã
            deg = k.wind.deg, //* –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞, –≥—Ä–∞–¥—É—Å—ã (–º–µ—Ç–µ–æ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ)
            gust = k.wind.gust, //* –ü–æ—Ä—ã–≤—ã –≤–µ—Ç—Ä–∞. –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –º–µ—Ç—Ä/—Å–µ–∫,
            speed = k.wind.speed, //* –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞. –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –º–µ—Ç—Ä/—Å–µ–∫
          } = k;

          return `
        <div class="day-hour">
          <div class="day-hour__item day-hour__item-time"><p>${time}</p></div>
          <div class="day-hour__item day-hour__item-img"><img title="${description}" src="https://openweathermap.org/img/wn/${icon}@2x.png" alt="#" width="100"/></div>
          <div class="day-hour__item day-hour__item-icon-text"><p>${cloud} %</p></div>
          <div class="day-hour__item day-hour__item-icon-text"><p>${temp}¬∞</p></div>
          <div class="day-hour__item day-hour__item-icon-text mobile"><p>${feels_like}¬∞</p></div>
          <div class="day-hour__item day-hour__item-icon-text"><p>${grnd_level}</p></div>
          <div class="day-hour__item day-hour__item-icon-text"><p>${humidity} %</p></div>
          <div class="day-hour__item day-hour__item-icon-text mobile"><p>${visibility_km} –∫–º</p></div>
          <div class="day-hour__item day-hour__item-icon-text mobile"><p>${gust}</p></div>
          <div class="day-hour__item day-hour__item-icon-text"><p>${speed}</p></div> 
          <div class="day-hour__item  day-hour__item-icon-text"><svg width="32" height="32" style="transform: rotate(${deg}deg)"><use href="${sprite}#icon-wind-w"></use></svg>
          </div>     
        </div>
      `;
        })
        .join('');
      return (
        `<div class="card-day"><div><div class="card-day__name-day"><h3>${dayWeekday}</h3>
        <h3>${dayMonthDay}</h3></div>
        </div><div class="block-hour">
        
        <div class="day-hour day-hour-name">
          <div class="day-hour__item"><!-- <p>–í—Ä–µ–º—è:</p> --></div>
          <div class="day-hour__item day-hour__item-img"><!-- <p>img</p> --></div>
          <div title="–û–±–ª–∞—á–Ω–æ—Å—Ç—å" class="day-hour__item day-hour__item-icon-text day-hour__name"><svg width="32" height="32"><use href="${sprite}#icon-clouds"></use></svg></div>
          <div title="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞" class="day-hour__item day-hour__item-icon-text day-hour__name"><svg width="32" height="32"><use href="${sprite}#icon-thermometer"></use></svg></div>
          <div title="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ—â—É—â–µ–Ω–∏—è" class="day-hour__item day-hour__item-icon-text day-hour__name mobile"><svg width="32" height="32"><use href="${sprite}#icon-temperature-feels-like"></use></svg></div>
          <div title="–î–∞–≤–ª–µ–Ω–∏–µ" class="day-hour__item day-hour__item-icon-text day-hour__name"><svg width="32" height="32"><use href="${sprite}#icon-barometer"></use></svg></div>
          <div title="–í–ª–∞–∂–Ω–æ—Å—Ç—å" class="day-hour__item day-hour__item-icon-text day-hour__name"><svg width="32" height="32"><use href="${sprite}#icon-raindrop1"></use></svg></div>
          <div title="–í–∏–¥–∏–º–æ—Å—Ç—å" class="day-hour__item  day-hour__item-icon-text day-hour__name mobile"><svg width="32" height="32"><use href="${sprite}#icon-eye3"></use></svg></div>
          <div title="–ü–æ—Ä—ã–≤—ã –≤–µ—Ç—Ä–∞" class="day-hour__item day-hour__item-icon-text day-hour__name mobile"><svg width="32" height="32"><use href="${sprite}#icon-wind"></use></svg></div>
          <div title="–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞" class="day-hour__item day-hour__item-icon-text day-hour__name mobile2"><svg width="32" height="32"><use href="${sprite}#icon-air-sock"></use></svg></div>    
          <div title="–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞" class="day-hour__item day-hour__item-icon-text day-hour__name mobile"><svg width="32" height="32"><use href="${sprite}#icon-compass2"></use></svg></div>  
        </div>
        ` +
        dayOne +
        '</div></div> '
      );
    })
    .join('');
  weatherDayTest = '<div class="card-week">' + weekOne + '</div>';
}
window.matchMedia('(min-width: 1600px)').addEventListener('change', e => {
  if (!e.matches) {
    Report.failure(
      '–í–∞—à–∞ —à–∏—Ä–∏–Ω–∞ —ç–∫—Ä–∞–Ω–∞ –º–µ–Ω–µ–µ 1600px',
      '–î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—ã –∏–∑–º–µ–Ω–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞, –∏–ª–∏ –º–∞—Å—à—Ç–∞–± —Å—Ç—Ä–∞–Ω–∏—Ü—ã'
    );
  }
  return;
});
screenWidth();
function screenWidth() {
  const screenWidth = window.innerWidth;
  if (screenWidth < 420) {
    return;
  } else if (screenWidth < 1600) {
    Report.failure(
      '–í–∞—à–∞ —à–∏—Ä–∏–Ω–∞ —ç–∫—Ä–∞–Ω–∞ –º–µ–Ω–µ–µ 1600px',
      '–î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—ã –∏–∑–º–µ–Ω–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞, –∏–ª–∏ –º–∞—Å—à—Ç–∞–± —Å—Ç—Ä–∞–Ω–∏—Ü—ã'
    );
  }
}
